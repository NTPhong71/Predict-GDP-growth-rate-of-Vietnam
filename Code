{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ad72fd11-a1a2-499b-9be2-bab50e4de60d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import datetime as dt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.metrics import mean_absolute_error\n",
    "from sklearn.utils.validation import check_is_fitted\n",
    "import statsmodels.api as sm\n",
    "from statsmodels.tsa.arima.model import ARIMA\n",
    "from statsmodels.graphics.tsaplots import plot_predict\n",
    "from datetime import datetime\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8a0d7418-5967-4231-8e83-65662b643cf6",
   "metadata": {},
   "outputs": [],
   "source": [
    "def wrangle(filepath):\n",
    "    \n",
    "    # Read xlsx.file\n",
    "    df = pd.read_excel(filepath)\n",
    "    \n",
    "    df[\"Date\"] = df[\"Year\"].astype(str) + \"-12-31\" # Create a new column with string\n",
    "    \n",
    "    df['Date']= pd.to_datetime(df['Date']) # Change \"Date\" column type to 'date-time' type\n",
    "    \n",
    "    df = df.set_index(\"Date\") # Set index \n",
    "    \n",
    "    df.drop(columns=\"Year\", inplace = True) # Drop 'Year' column\n",
    "    \n",
    "    \n",
    "    \n",
    "    return df\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "12a873e1-edbd-4c55-a99c-edec9c5dae21",
   "metadata": {},
   "outputs": [],
   "source": [
    "Data = wrangle('Documents/Real GDP annual growth rate (1986-2018).xlsx')\n",
    "Data['Real GDP growth rate'].plot(figsize=(12,5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a9d7f180-1f49-4b9a-a1fb-41f13df34e34",
   "metadata": {},
   "source": [
    "Check for stationary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3a4e6353-4cc6-4739-9fdc-b7c80227244c",
   "metadata": {},
   "outputs": [],
   "source": [
    "from statsmodels.tsa.stattools import adfuller\n",
    "\n",
    "def adfuller_test(dataset):\n",
    "    df_test = adfuller(dataset, autolag='AIC')\n",
    "    print('1. ADF Statistic: %f' % df_test[0])\n",
    "    print('2. p-value: %f' % df_test[1])\n",
    "    print('3. Num of lags: ', df_test[2])\n",
    "    print('4. Num of Obs: ', df_test[3])\n",
    "    print('Critical Values:')\n",
    "    for key, value in df_test[4].items():\n",
    "        print('\\t%s: %.3f' % (key, value))\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "55d74911-3691-41dd-8e9b-7862eef36942",
   "metadata": {},
   "outputs": [],
   "source": [
    "adfuller_test(Data['Real GDP growth rate'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b835252-babc-45da-beb8-00d5de4e19c3",
   "metadata": {},
   "source": [
    "0th element = -3.429359 .It is test-statistic, more negative means likely to be stationary\n",
    "p-Value = 0.009998 < 0.05 --> reject null hypothesis --> Reject non-stationary\n",
    "So, this data is stationary"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a4a8e6fe-7ddc-4d53-b8e2-e05fd89b7ae9",
   "metadata": {},
   "source": [
    "### Figure out order for ARIMA model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2e00de5d-c01c-486f-a6fe-35588d6d261c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Because the dataset is stationary, so I set d = 0.\n",
    "# Create empty list to store search results\n",
    "order_aic_bic=[]\n",
    "\n",
    "# Loop over p values from 0-2\n",
    "for p in range(3):\n",
    "  # Loop over q values from 0-2\n",
    "    for q in range(3):\n",
    "      \t# create and fit ARMA(p,q) model\n",
    "        model = sm.tsa.statespace.SARIMAX(Data, order=(p,0,q), trend='c')\n",
    "        results = model.fit()\n",
    "        \n",
    "        # Append order and results tuple\n",
    "        order_aic_bic.append((p, q, results.aic, results.bic))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "be2b82d8-557f-413f-9ce1-c8dad2c63de6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Construct DataFrame from order_aic_bic\n",
    "order_df = pd.DataFrame(order_aic_bic, \n",
    "                        columns=['p', 'q', 'AIC', 'BIC'])\n",
    "\n",
    "# Print order_df in order of increasing AIC\n",
    "print(order_df.sort_values('AIC'))\n",
    "\n",
    "# Print order_df in order of increasing BIC\n",
    "print(order_df.sort_values('BIC'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a5732e5a-f3f5-484b-870d-d4e817a123f5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Pair value (1,1) make AIC smallest, then pick (1,1) to order \n",
    "# Fit model\n",
    "model = ARIMA(Data, order=(1,0,0))\n",
    "#results = model.fit()\n",
    "\n",
    "# Check diagnostics\n",
    "plt.figure(figsize = (20, 20))\n",
    "results.plot_diagnostics()\n",
    "plt.show()\n",
    "print(results.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8bdf9be0-def6-4796-bfad-912f3ebaef57",
   "metadata": {},
   "source": [
    "### Split Data into Training and Testing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f6aee9f8-5038-4b05-a4c8-8640f3dfe1d9",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(Data.shape)\n",
    "Data_train = Data.loc[:'2012']\n",
    "Data_test = Data.loc['2013':]\n",
    "print(Data_train.shape, Data_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae832fd7-f0f7-448d-8a4b-1b6e32e20868",
   "metadata": {},
   "source": [
    "Train the model:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "45cd7307-e020-4210-b334-26ecca23378d",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = ARIMA(Data_train['Real GDP growth rate'], order = (1,0,0))\n",
    "model = model.fit()\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "35d73359-2add-4a25-b4f8-4f6e5155cea6",
   "metadata": {},
   "source": [
    "### Make prediction on test set:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ba17d787-f789-4b1b-85c3-6a6993081578",
   "metadata": {},
   "outputs": [],
   "source": [
    "start = len(Data_train)\n",
    "end = len(Data_train) + len(Data_test) -1\n",
    "pred = model.predict(start=start, end=end, type='level')\n",
    "print(pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "96159b94-26cc-4491-af89-600867750ed6",
   "metadata": {},
   "outputs": [],
   "source": [
    "pred.plot(legend=True)\n",
    "Data_test['Real GDP growth rate'].plot(legend=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e666aeea-dfc5-4f9c-ab13-b3435aebee8c",
   "metadata": {},
   "outputs": [],
   "source": [
    "Data_test.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3f3ec631-44fb-4989-bf5b-161db195543a",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import mean_squared_error\n",
    "from math import sqrt\n",
    "rmse = sqrt(mean_squared_error(pred, Data_test['Real GDP growth rate']))\n",
    "print(rmse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1768969e-80b3-4cb5-bdd2-8e68ac37f40f",
   "metadata": {},
   "outputs": [],
   "source": [
    "modelX = ARIMA(Data['Real GDP growth rate'], order=(1,0,0))\n",
    "modelX = modelX.fit()\n",
    "Data.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a2cc5a6f-a4f5-49d3-a228-e265e390c9fa",
   "metadata": {},
   "outputs": [],
   "source": [
    "pred = modelX.predict(start=len(Data)-33, end=len(Data)+3, typ='level').rename('Arima Prediction')\n",
    "print(pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6399a48f-72a1-4954-a9d0-fa26838ac9dc",
   "metadata": {},
   "outputs": [],
   "source": [
    "pred.plot(figsize=(12,5), legend=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f4824386-8972-401d-9e9f-b07ffed094d0",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "plt.plot(Data)\n",
    "plt.plot(pred, color='r')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aa08a704-d672-47cb-b921-b0f113fb3564",
   "metadata": {},
   "outputs": [],
   "source": [
    "pred_fix = pred.shift(-1)\n",
    "pred_fix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8f164810-06f0-4387-ba1b-29da8e32338f",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.plot(Data)\n",
    "plt.plot(pred_fix, color='r')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca9c17b2-2b48-4a6c-b2c5-9ed4c0f48cad",
   "metadata": {},
   "source": [
    "### PREDICTED RESULTS\n",
    "The GDP growth rate of 2019 = 6,44%\n",
    ", The GDP growth rate of 2020 = 6,39%\n",
    ", The GDP growth rate of 2021 = 6,35%"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "58b31cbc-9e87-49df-8e49-bba357543b51",
   "metadata": {},
   "source": [
    "### ASSUMING DATA\n",
    "Assuming, in 2019 have economic-crisis and the GDP growth rate of VietNam fell -0,1%.\n",
    "We set the value the GDP growth rate of 31/12/2019 as -0,001"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1529ce1a-274f-4cf9-9a2c-2599919fb077",
   "metadata": {},
   "outputs": [],
   "source": [
    "Data2 = wrangle('Documents/GDP annual growth rate (1986-2019).xlsx')\n",
    "Data2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c1e47a45-e2a8-467b-86b0-595f3aeb7f58",
   "metadata": {},
   "outputs": [],
   "source": [
    "adfuller_test(Data2['Real GDP growth rate'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3efecdb6-9694-4fd2-8eb2-ec1c95aa3183",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true,
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "f7f89937-dfff-4caf-ac33-6d917b5051ae",
   "metadata": {},
   "source": [
    "p-value = 0.222125 > 0.05 => Accept null hypothesis --> Accept non-stationary So, this data is non-stationary"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9bb3550f-f854-40e4-bd6b-95d3196f9f46",
   "metadata": {},
   "source": [
    "### Take the first difference of the data\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "671d5065-4fe9-4802-bbdd-2e076c9bed75",
   "metadata": {},
   "outputs": [],
   "source": [
    "Data2_diff = Data2.diff().dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4e8272b5-0e03-4c6d-a909-7a814b696bec",
   "metadata": {},
   "outputs": [],
   "source": [
    "adfuller_test(Data2_diff['Real GDP growth rate'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f5d8e8d7-919d-4488-b813-1f839c652db6",
   "metadata": {},
   "source": [
    "ADF Statistic = -3.553859 < 0 , p-value = 0.006707 < 0.05 =>> Data2_diff is stationary"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9a4272f6-8b54-42ef-bd1f-5dc49615949d",
   "metadata": {},
   "source": [
    "### Figure out order for ARIMA model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1ab87021-92cf-49ad-b741-09a7434cb7b3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Data2_diff is stationary => set D = 0\n",
    "# Create empty list to store search results\n",
    "order_aic_bic1=[]\n",
    "\n",
    "# Loop over p values from 0-3\n",
    "for p in range(4):\n",
    "  # Loop over q values from 0-3\n",
    "    for q in range(4):\n",
    "      \t# create and fit ARMA(p,q) model\n",
    "        model1 = sm.tsa.statespace.SARIMAX(Data2_diff, order=(p,0,q), trend='c')\n",
    "        results1 = model1.fit()\n",
    "        \n",
    "        # Append order and results tuple\n",
    "        order_aic_bic1.append((p, q, results1.aic, results1.bic))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "923972a7-2152-4e1b-ac43-2082cb29148f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Construct DataFrame from order_aic_bic\n",
    "order_df1 = pd.DataFrame(order_aic_bic1, \n",
    "                        columns=['p', 'q', 'AIC', 'BIC'])\n",
    "\n",
    "# Print order_df in order of increasing AIC\n",
    "print(order_df1.sort_values('AIC'))\n",
    "\n",
    "# Print order_df in order of increasing BIC\n",
    "print(order_df1.sort_values('BIC'))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4d241e8c-969e-4859-8548-fdc7a95be669",
   "metadata": {},
   "source": [
    "Choose (p,q) = (0,2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "47d9252e-e5b3-43a7-aa69-5c7d491fa4f5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fit model\n",
    "model1 = ARIMA(Data, order=(0,0,2))\n",
    "#results = model.fit()\n",
    "# Check diagnostics\n",
    "plt.figure(figsize = (20, 20))\n",
    "results1.plot_diagnostics()\n",
    "plt.show()\n",
    "print(results.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48abe7fa-97b4-4850-8c82-fa704cdcae8e",
   "metadata": {},
   "source": [
    "### Split Data into Training and Testing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a1ae8959-9649-4216-b962-5f0737ae7641",
   "metadata": {},
   "outputs": [],
   "source": [
    "#print(Data.shape)\n",
    "train = Data2_diff.loc[:'2018']\n",
    "test = Data2_diff.loc['2019':]\n",
    "#print(train.shape, test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "56d0050a-49b2-4c17-81de-28e7e2692408",
   "metadata": {},
   "source": [
    "Train the model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d160b7d6-6187-4fc0-8b0e-6d73b243a222",
   "metadata": {},
   "outputs": [],
   "source": [
    "model1 = ARIMA(train['Real GDP growth rate'], order = (0,0,2))\n",
    "model1= model1.fit()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4503e9f0-e2c5-449b-a8e0-d421f478461a",
   "metadata": {},
   "source": [
    "### Make prediction on test set:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "01898935-de1f-4327-ba13-ee2e06aea031",
   "metadata": {},
   "outputs": [],
   "source": [
    "start1 = len(train)\n",
    "end1 = len(train) + len(test) -1\n",
    "pred1 = model.predict(start=start1, end=end1, type='level')\n",
    "print(pred1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "581d8435-07b5-4fee-a296-71b5e30c4b39",
   "metadata": {},
   "outputs": [],
   "source": [
    "pred1.plot(legend=True)\n",
    "test['Real GDP growth rate'].plot(legend=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7ac4aa98-fa46-40d9-8f55-a21d93b2576b",
   "metadata": {},
   "outputs": [],
   "source": [
    "test.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f5736276-4278-4e0a-983c-835b2ad281d8",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import mean_squared_error\n",
    "from math import sqrt\n",
    "rmse = sqrt(mean_squared_error(pred1, test['Real GDP growth rate']))\n",
    "print(rmse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "39a21c0e-ebdd-4c16-85a9-7731f82a7886",
   "metadata": {},
   "outputs": [],
   "source": [
    "modelY = ARIMA(Data2_diff['Real GDP growth rate'], order=(0,0,2))\n",
    "modelY = modelY.fit()\n",
    "Data.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cde118a0-4600-4ea6-a61a-30d4b84144a7",
   "metadata": {},
   "outputs": [],
   "source": [
    "pred1 = modelY.predict(start=len(Data2_diff)-33, end=len(Data2_diff)+2, typ='level').rename('Arima1 Prediction')\n",
    "print(pred1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9da61143-8890-471b-aba6-a9e6a8120595",
   "metadata": {},
   "outputs": [],
   "source": [
    "pred1.plot(figsize=(12,5), legend=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3a761233-d7f9-4217-9714-c3f68dee6c6f",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.plot(Data2_diff)\n",
    "plt.plot(pred1, color='r')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "762c2907-3bd3-49dc-8cff-cee26bdd963b",
   "metadata": {},
   "outputs": [],
   "source": [
    "pred_fix1 = pred1.shift(-1)\n",
    "pred_fix1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1139642f-490b-4b16-8d12-71e8831f8a52",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.plot(Data2_diff)\n",
    "plt.plot(pred_fix1, color = 'r')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a85b3c9-d5c2-4650-bb61-c1fcca107e18",
   "metadata": {},
   "source": [
    "### PREDICT RESULTS:\n",
    "The GDP growth rate of 2020 = 0.031711, The GDP growth rate of 2021 = -0.000579"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "64fecb2b-b85a-4c9d-b932-9ca02c1bfa2e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
